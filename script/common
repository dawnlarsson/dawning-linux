#!/bin/sh
info_version="25"
info_name="dawning-linux"
info_full_name="$info_name-$info_version"

ANSI=$'\033['
RESET=$ANSI"0m"
BOLD=$ANSI"1m"
RED=$ANSI"91m"
GREEN=$ANSI"92m"
YELLOW=$ANSI"93m"
BLUE=$ANSI"94m"
MAGENTA=$ANSI"95m"
CYAN=$ANSI"96m"
WHITE=$ANSI"97m"

if [ "$(uname)" = "Darwin" ]; then
        alias nproc="sysctl -n hw.physicalcpu"
        alias make="gmake"
        alias cp="cp -X"
        alias stat_bytes="stat -f %z"
else
        alias stat_bytes="stat -c %s"
fi

label() {
        echo $CYAN $BOLD
        echo "    $@"
        echo "_____________________________________________________________________________"
        echo $RESET
}

size() {
        local size=$(stat_bytes "$1")
        echo "$size bytes ($(echo "scale=2; $size / 1024" | bc) KB, $(echo "scale=2; $size / 1024 / 1024" | bc) MB)"
}

is_file() {
        if [ ! -f "$1" ]; then
                return 1
        fi
}

is_safe() {
        current_dir=$(basename "$(pwd)")

        if [ "$current_dir" != $info_name ]; then
                echo "ERROR: Not in repository root directory!"
                echo "This script must be run from the $info_name root directory."
                echo "Current directory: $(pwd)"
                exit 1
        fi
}

key() {
        local value=$(grep "#> $1" artifacts/.config | sed "s/#> $1 //")
        echo $value
}

line_has() {
        is_file "$1" || return 1
        [ -z "$2" ] && return 1
    
        grep -F -q "$2" "$1"
        return $?
}

line_add_padded() {
        line_has "$1" "$2" && return 0
        echo "$2" >> "$1"
}

line_add_padded() {
        line_has "$1" "$2" && return 0
        echo "" >> "$1"
        echo "$2" >> "$1"
        echo "" >> "$1"
}

if [ "$(id -u)" != "0" ]; then
        sh script/label Error
        echo "Build must be run with root!" 1>&2
        echo
        exit 1
fi

is_safe